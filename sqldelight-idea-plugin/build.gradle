import org.jetbrains.intellij.tasks.RunPluginVerifierTask.FailureLevel

plugins {
  alias(libs.plugins.intellij)
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.changelog)
  alias(libs.plugins.ksp)
}

kotlin.jvmToolchain {
  languageVersion.set(JavaLanguageVersion.of(11))
  vendor.set(JvmVendorSpec.AZUL)
}

intellij {
  updateSinceUntilBuild = false

  // Comment version and uncomment localPath to test a local IDE build.
  version = "IC-${libs.versions.idea.get()}"
//  localPath = "/Applications/Android Studio.app"

  pluginName = 'SQLDelight'
  plugins = [
      "org.jetbrains.kotlin",
      "com.intellij.gradle",
      "com.intellij.java",
      "org.jetbrains.android"
  ]
  if (!project.version.endsWith("SNAPSHOT")) {
    tasks.named('patchPluginXml') {
      changeNotes = (provider { changelog.get(project.version).toHTML() })
    }
  } else {
    tasks.named('patchPluginXml') {
      version = "$VERSION_NAME-${System.currentTimeMillis()}"
    }
  }
}

tasks.named('runIde') {
  maxHeapSize = "4g"
}

tasks.named('runPluginVerifier') {
  ideVersions = [
      "IC-2022.1.4", // AS: Electric Eel (2022.1.1) RC 1
      "IC-2022.2.4", // IC
      "IC-2022.3.1", // IC
  ]

  def customFailureLevel = FailureLevel.ALL
  customFailureLevel.remove(FailureLevel.DEPRECATED_API_USAGES)
  customFailureLevel.remove(FailureLevel.EXPERIMENTAL_API_USAGES)
  customFailureLevel.remove(FailureLevel.INTERNAL_API_USAGES)
  customFailureLevel.remove(FailureLevel.NOT_DYNAMIC)
  customFailureLevel.remove(FailureLevel.SCHEDULED_FOR_REMOVAL_API_USAGES)

  failureLevel = customFailureLevel
}

changelog {
  path = "$rootDir/CHANGELOG.md"
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getPluginToken() {
  return hasProperty('intellijPublishToken') ? intellijPublishToken : ""
}

tasks.named('publishPlugin') {
  token = getPluginToken()
  channels = [isReleaseBuild() ? 'Stable' : 'EAP']
}

sourceSets {
  main.java.srcDir "src/generated/kotlin"
}

repositories {
  maven { url = uri("https://repo.gradle.org/gradle/libs-releases") }
}

dependencies {
  ksp libs.moshiCodegen

  implementation project(':sqldelight-compiler')

  implementation libs.sqliteJdbc
  implementation(libs.bugsnag) {
    exclude group: "org.slf4j"
  }
  implementation libs.picnic
  implementation libs.moshi

  testImplementation libs.truth
  testImplementation libs.intellij.android
  testImplementation project(':dialects:sqlite-3-18')
}

def getBugsnagKey() {
  return hasProperty('SQLDELIGHT_BUGSNAG_KEY') ? SQLDELIGHT_BUGSNAG_KEY : ''
}

tasks.register('bugsnagKey') {
  def outputDir = file("src/generated/kotlin")
  def versionFile = file("$outputDir/app.cash.sqldelight/intellij/Bugsnag.kt")

  inputs.property 'bugsnagKey', getBugsnagKey()
  outputs.file(versionFile)

  doLast {
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package app.cash.sqldelight.intellij

internal val BUGSNAG_KEY = "${getBugsnagKey()}"
"""
  }
}

tasks.named('compileKotlin') { dependsOn('bugsnagKey') }

tasks.named('buildSearchableOptions') { enabled = false }

afterEvaluate {
  tasks.named('kspKotlin') { dependsOn('bugsnagKey') }
}
