plugins {
  alias(deps.plugins.kotlin.jvm)
  alias(deps.plugins.grammarKitComposer)
  alias(deps.plugins.publish)
  alias(deps.plugins.dokka)
}

test {
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showExceptions true
    showStackTraces true
    showCauses true
  }
}

sourceSets {
  main.java.srcDir "gen"
}

grammarKit {
  intellijRelease.set(deps.versions.idea)
}

dependencies {
  api deps.sqlitePsi
  api(project(':sqldelight-compiler:dialect')) {
    exclude group: "com.jetbrains.intellij.platform", module: "core-impl"
  }

  implementation deps.kotlinPoet
  implementation deps.jgrapht

  compileOnly deps.sqliteJdbc
  compileOnly deps.intellij.core
  compileOnly deps.intellij.lang
  compileOnly deps.intellij.java
  compileOnly deps.intellij.testFramework

  testImplementation deps.burst
  testImplementation deps.sqliteJdbc
  testImplementation deps.intellij.core
  testImplementation deps.intellij.lang
  testImplementation deps.intellij.java
  testImplementation deps.intellij.testFramework
  testImplementation deps.kotlin.test.junit
  testImplementation deps.truth
  testImplementation project(':test-util')
  testImplementation project(':dialects:hsql')
  testImplementation project(':dialects:mysql')
  testImplementation project(':dialects:postgresql')
  testImplementation project(':dialects:sqlite-3-18')
  testImplementation project(':dialects:sqlite-3-24')
  testImplementation project(':dialects:sqlite-3-25')
}

task pluginVersion {
  def outputDir = file("gen")

  inputs.property 'version', version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/app.cash.sqldelight/Version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package app.cash.sqldelight

val VERSION = "${project.version}"
"""
  }
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"

afterEvaluate {
  tasks.named('compileKotlin').configure { dependsOn('pluginVersion') }
  tasks.named('dokkaHtml').configure { dependsOn('pluginVersion') }
  tasks.named('sourcesJar').configure { dependsOn('pluginVersion') }
}