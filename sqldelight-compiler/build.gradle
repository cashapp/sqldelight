plugins {
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.grammarKitComposer)
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
}

test {
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showExceptions true
    showStackTraces true
    showCauses true
  }
}

sourceSets {
  main.java.srcDir "gen"
}

grammarKit {
  intellijRelease.set(libs.versions.idea)
}

dependencies {
  api libs.sqlPsi
  api(project(':sqldelight-compiler:dialect')) {
    exclude group: "com.jetbrains.intellij.platform", module: "core-impl"
  }

  implementation libs.kotlinPoet
  implementation libs.jgrapht

  compileOnly libs.sqliteJdbc
  compileOnly libs.intellij.core
  compileOnly libs.intellij.lang
  compileOnly libs.intellij.java
  compileOnly libs.intellij.testFramework

  testImplementation libs.burst
  testImplementation libs.sqliteJdbc
  testImplementation libs.intellij.core
  testImplementation libs.intellij.lang
  testImplementation libs.intellij.java
  testImplementation libs.intellij.testFramework
  testImplementation libs.kotlin.test.junit
  testImplementation libs.truth
  testImplementation project(':test-util')
  testImplementation project(':dialects:hsql')
  testImplementation project(path: ':dialects:mysql', configuration: 'shadowRuntimeElements')
  testImplementation project(path: ':dialects:postgresql', configuration: 'shadowRuntimeElements')
  testImplementation project(':dialects:sqlite-3-18')
  testImplementation project(path: ':dialects:sqlite-3-24', configuration: 'shadowRuntimeElements')
  testImplementation project(path: ':dialects:sqlite-3-25', configuration: 'shadowRuntimeElements')
  testImplementation project(path: ':dialects:sqlite-3-30', configuration: 'shadowRuntimeElements')
  testImplementation project(path: ':dialects:sqlite-3-35', configuration: 'shadowRuntimeElements')
  testImplementation project(path: ':dialects:sqlite-3-38', configuration: 'shadowRuntimeElements')
}

task pluginVersion {
  def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'rev-parse', '--short', 'HEAD'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }

  def outputDir = file("gen")

  inputs.property 'version', version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/app.cash.sqldelight/Version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package app.cash.sqldelight

val VERSION = "${project.version}"
val GIT_SHA = "${getGitHash}"
"""
  }
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"

afterEvaluate {
  tasks.named('compileKotlin').configure { dependsOn('pluginVersion') }
  tasks.named('dokkaHtml').configure { dependsOn('pluginVersion') }
  tasks.named('javaSourcesJar').configure { dependsOn('pluginVersion') }
}
