apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.squareup.sqldelight'

archivesBaseName = 'sample-common'

sqldelight {
  HockeyDb {
    packageName = "com.example.sqldelight.hockey"
  }
}


// TODO work around for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
  compileClasspath
}

kotlin {
  sourceSets {
    commonMain {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib'
      }
    }
    commonTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test-common'
        implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
      }
    }
    iosMain {
      dependencies {
        implementation "com.squareup.sqldelight:ios-driver:${versions.sqldelight}"
      }
    }

    jvmTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test'
        implementation 'org.jetbrains.kotlin:kotlin-test-junit'
        implementation "com.squareup.sqldelight:sqlite-driver:${versions.sqldelight}"
      }
    }
  }

  targetFromPreset(presets.jvm, 'jvm')

  def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
  def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
  targetFromPreset(iosPreset, 'ios') {
    binaries {
      framework {
        // Disable bitcode embedding for the simulator build.
        if (!buildForDevice) {
          embedBitcode("disable")
        }
      }
    }
  }
}

tasks.register("packForXCode") {
  def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
  dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

  doLast {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
    def targetDir = frameworkDir
    copy {
      from srcFile.parent
      into targetDir
      include 'greeting.framework/**'
      include 'greeting.framework.dSYM'
    }
  }
}

tasks.register("iosTest") {
  def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
  dependsOn 'linkIos'
  group = JavaBasePlugin.VERIFICATION_GROUP
  description = "Runs tests for target 'ios' on an iOS simulator"

  doLast {
    def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
    exec {
      commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary.absolutePath
    }
  }
}

tasks.build.dependsOn packForXCode
