/*
 * Copyright (C) 2017 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  parserClass="com.squareup.sqldelight.core.SqlDelightParser"
  elementTypeHolderClass="com.squareup.sqldelight.core.SqlDelightTypes"
  psiPackage = "com.squareup.sqldelight.core.psi"
  psiImplPackage = "com.squareup.sqldelight.core.psi.impl"

  psiClassPrefix = "SqlDelight"

  // "Real" rules are implemented by SqliteParser, so it acts as the parser util class.
  parserUtilClass="com.alecstrong.sqlite.psi.core.parser.SqliteParser"
  elementTypeClass = "com.alecstrong.sqlite.psi.core.SqliteElementType"

  parserImports=[
    // Always needed
    "static com.intellij.lang.parser.GeneratedParserUtilBase.*"
    // If you want to use a token from the core grammar it must be statically imported.
    "static com.alecstrong.sqlite.psi.core.psi.SqliteTypes.STRING"
  ]
}
root ::= column_def | sql_stmt_list | type_name

// Overrides.
sql_stmt_list ::= import_stmt * [ stmt_identifier <<sql_stmt_real>> ] ( ';' [ stmt_identifier <<sql_stmt_real>> ] ) * {
  implements="com.alecstrong.sqlite.psi.core.psi.SqliteSqlStmtList"
  extends="com.alecstrong.sqlite.psi.core.psi.impl.SqliteSqlStmtListImpl"
}
column_def ::= <<column_name_real>> type_name [ 'AS' annotation * java_type_name ] ( <<column_constraint_real>> ) * {
  implements=[
    "com.alecstrong.sqlite.psi.core.psi.SqliteColumnDef";
    "com.squareup.sqldelight.core.lang.psi.TypedColumn"
  ]
  extends="com.squareup.sqldelight.core.lang.psi.ColumnDefMixin"
}
type_name ::= ( 'TEXT' | 'BLOB' | 'INTEGER' | 'REAL' ) {
  implements=[
    "com.alecstrong.sqlite.psi.core.psi.SqliteTypeName";
    "com.squareup.sqldelight.core.lang.psi.TypedColumn"
  ]
  extends="com.squareup.sqldelight.core.lang.psi.SqliteTypeMixin"
}

// New rules.
import_stmt ::= 'import' java_type ';'
stmt_identifier ::= ( <<identifier_real>> ':' ) ? {
  extends="com.squareup.sqldelight.core.lang.psi.StmtIdentifierMixin"
}
annotation ::= '@' java_type ( '(' annotation_value ')'
                             | '(' <<identifier_real>> '=' annotation_value ( ',' <<identifier_real>> '=' annotation_value )* ')'
                             )?
annotation_value ::= java_type_name '.class'
                   | <<string_literal_real>>
                   | <<numeric_literal_real>>
                   | '{' annotation_value ( ',' annotation_value ) * '}'
java_type_name ::= 'Boolean'
            | 'Short'
            | 'Integer'
            | 'Long'
            | 'Float'
            | 'Double'
            | 'String'
            | 'ByteArray'
            | parameterized_java_type
parameterized_java_type ::= java_type ( ( '<' java_type_name ( ',' java_type_name )* '>' )
                          | ( '<' ( java_type_name ',' )* java_type '<' java_type_name2 ( ',' java_type_name2 )* '>>' ) )?
java_type_name2 ::= java_type
java_type ::= ( <<identifier_real>> '.' )* <<identifier_real>>
