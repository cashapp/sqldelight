import org.jetbrains.kotlin.konan.target.HostManager

plugins {
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.shadow)
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
  id("java-gradle-plugin")
  id("jvm-test-suite")
  id("app.cash.sqldelight.toolchain.compiler")
}

testing {
  suites {
    dockerTest(JvmTestSuite) {
      useJUnit()
    }
    grammarkitTest(JvmTestSuite) {
      useJUnit()
    }
  }
}

configurations.dockerTestImplementation.extendsFrom(configurations.testImplementation)
configurations.grammarkitTestImplementation.extendsFrom(configurations.testImplementation)

gradlePlugin {
  plugins {
    sqlDelight {
      id = 'app.cash.sqldelight'
      implementationClass = 'app.cash.sqldelight.gradle.SqlDelightPlugin'
    }
  }

  testSourceSets(sourceSets.test, sourceSets.dockerTest, sourceSets.grammarkitTest)
}

configurations {
  shade
}
configurations.compileOnly.extendsFrom(configurations.shade)

dependencies {
  api(libs.sqlPsi) {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
  }

  implementation libs.sqliteJdbc
  implementation libs.objectDiff
  implementation libs.schemaCrawler.tools
  implementation libs.schemaCrawler.sqlite

  implementation project(':sqlite-migrations')
  implementation project(':sqldelight-compiler')
  // Only shade the minimum IntelliJ libs.
  shade(libs.intellij.core)
  // Analysis has no dependencies.
  shade libs.intellij.analysis
  shade (libs.intellij.lang) {
    transitive = false
  }
  shade(libs.intellij.coreImpl) {
    transitive = false
  }
  shade(libs.intellij.projectModel) {
    transitive = false
  }
  shade(libs.intellij.projectModelImpl) {
    transitive = false
  }
  shade(libs.intellij.analysisImpl) {
    transitive = false
  }
  shade(libs.intellij.testFramework) {
    transitive = false
  }
  shade(libs.intellij.langImpl) {
    transitive = false
  }

  compileOnly libs.kotlin.plugin
  compileOnly libs.android.plugin

  implementation libs.jna

  testImplementation libs.junit
  testImplementation libs.truth
  testImplementation libs.testParameterInjector
}

tasks.named('test') {
  // The integration tests require local installations of artifacts.
  dependsOn(
      ":dialects:mysql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:hsql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:postgresql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite:json-module:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-18:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-24:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-25:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-30:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-33:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-35:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-38:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:dialect:publishAllPublicationsToInstallLocallyRepository",
      ":runtime:publishKotlinMultiplatformPublicationToInstallLocallyRepository",
      ":runtime:publishJvmPublicationToInstallLocallyRepository",
      ":runtime:publishJsPublicationToInstallLocallyRepository",
      ":drivers:android-driver:publishAllPublicationsToInstallLocallyRepository",
      ":drivers:sqlite-driver:publishAllPublicationsToInstallLocallyRepository",
      ":drivers:jdbc-driver:publishAllPublicationsToInstallLocallyRepository",
      ":sqlite-migrations:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-gradle-plugin:publishAllPublicationsToInstallLocallyRepository",
  )
  if (HostManager.hostIsMac) {
    dependsOn(
        ":drivers:native-driver:publishIosX64PublicationToInstallLocallyRepository",
        ":drivers:native-driver:publishIosSimulatorArm64PublicationToInstallLocallyRepository",
        ":drivers:native-driver:publishKotlinMultiplatformPublicationToInstallLocallyRepository",
        ":runtime:publishIosX64PublicationToInstallLocallyRepository",
        ":runtime:publishIosSimulatorArm64PublicationToInstallLocallyRepository",
        ":runtime:publishIosArm64PublicationToInstallLocallyRepository",
        ":runtime:publishIosArm32PublicationToInstallLocallyRepository",
        ":runtime:publishMacosX64PublicationToInstallLocallyRepository",
    )
  }
  useJUnit {
    if (project.hasProperty("Instrumentation")) {
      includeCategories 'app.cash.sqldelight.Instrumentation'
    } else {
      excludeCategories 'app.cash.sqldelight.Instrumentation'
    }
  }
  environment("ORG_GRADLE_PROJECT_sqldelightVersion", project.version)
}

tasks.named('check') {
  dependsOn(testing.suites.dockerTest, testing.suites.grammarkitTest)
}

tasks.named('dockerTest') {
  if (project.hasProperty("Instrumentation")) enabled = false
  dependsOn(
      ":dialects:mysql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:postgresql:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:dialect:publishAllPublicationsToInstallLocallyRepository",
      ":runtime:publishKotlinMultiplatformPublicationToInstallLocallyRepository",
      ":runtime:publishJvmPublicationToInstallLocallyRepository",
      ":drivers:jdbc-driver:publishAllPublicationsToInstallLocallyRepository",
      ":sqlite-migrations:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-gradle-plugin:publishAllPublicationsToInstallLocallyRepository",
      ":drivers:r2dbc-driver:publishAllPublicationsToInstallLocallyRepository",
      ":extensions:async-extensions:publishAllPublicationsToInstallLocallyRepository",
  )
  environment("ORG_GRADLE_PROJECT_sqldelightVersion", project.version)
}

tasks.named("grammarkitTest") {
  dependsOn(
      ":dialects:sqlite-3-18:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:dialect:publishAllPublicationsToInstallLocallyRepository",
      ":runtime:publishKotlinMultiplatformPublicationToInstallLocallyRepository",
      ":runtime:publishJvmPublicationToInstallLocallyRepository",
      ":drivers:sqlite-driver:publishAllPublicationsToInstallLocallyRepository",
      ":drivers:jdbc-driver:publishAllPublicationsToInstallLocallyRepository",    
      ":sqlite-migrations:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-gradle-plugin:publishAllPublicationsToInstallLocallyRepository",
  )
  javaLauncher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(17)
  }
  environment("ORG_GRADLE_PROJECT_sqldelightVersion", project.version)
}

tasks.named('validatePlugins') {
  enableStricterValidation = true
}

tasks.named("shadowJar") {
  archiveClassifier.set("")
  configurations = [project.configurations.shade]

  minimize {
    exclude(dependency(libs.intellij.testFramework.get()))
    exclude(dependency(libs.intellij.langImpl.get()))
  }

  include '*.jar'
  include '**/*.class'
  include 'META-INF/gradle-plugins/*'
  include "misc/*.properties"
  include 'messages/*.properties'
  include "org/intellij/**"
  include "com/intellij/**"
  include "org/picocontainer/**"
  include "it/unimi/**"
  include "org/jdom/**"
  include "com/github/benmanes/**"

  exclude '/groovy**'
  exclude '/kotlin/**'
}

artifacts {
  runtimeOnly(tasks.named('shadowJar'))
  archives(tasks.named('shadowJar'))
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
