/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

allprojects {
  ext {
    isReleaseBuild = {
      return VERSION_NAME.contains("SNAPSHOT") == false
    }

    getReleaseRepositoryUrl = {
      return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
              "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    }

    getSnapshotRepositoryUrl = {
      return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
              "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    getRepositoryUsername = {
      return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
    }

    getRepositoryPassword = {
      return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
    }

    getGpgKey = {
      return hasProperty('signingKey') ? signingKey : ""
    }

    configurePublicationPom = { pom ->
      pom.name = POM_NAME
      pom.description = POM_DESCRIPTION
      pom.url = POM_URL
      pom.licenses {
        license {
          distribution = "repo"
          name = POM_LICENCE_NAME
          url = POM_LICENCE_URL
        }
      }
      pom.developers {
        developer {
          id = POM_DEVELOPER_ID
          name = POM_DEVELOPER_NAME
        }
      }
      pom.scm {
        connection = POM_SCM_CONNECTION
        developerConnection = POM_SCM_DEV_CONNECTION
        url = POM_SCM_URL
      }
    }
  }
}

def configurePom(pom) {
  pom.groupId = GROUP
  pom.artifactId = POM_ARTIFACT_ID
  pom.version = VERSION_NAME

  pom.project {
    name POM_NAME
    packaging POM_PACKAGING
    description POM_DESCRIPTION
    url POM_URL

    scm {
      url POM_SCM_URL
      connection POM_SCM_CONNECTION
      developerConnection POM_SCM_DEV_CONNECTION
    }

    licenses {
      license {
        name POM_LICENCE_NAME
        url POM_LICENCE_URL
        distribution POM_LICENCE_DIST
      }
    }

    developers {
      developer {
        id POM_DEVELOPER_ID
        name POM_DEVELOPER_NAME
      }
    }
  }
}

afterEvaluate { project ->
  tasks.create("installLocally", Upload) {
    configuration = configurations.archives

    repositories {
      mavenDeployer {
        repository(url: "file://${rootProject.buildDir}/localMaven")

        configurePom(pom)
      }
    }
  }

  signing {
    required { isReleaseBuild() }

    def signingKey = getGpgKey()
    if (!signingKey.isEmpty() && isReleaseBuild()) {
      useInMemoryPgpKeys(signingKey, "")
      sign configurations.archives
    }
  }

  if (project.getPlugins().hasPlugin('com.android.application') ||
      project.getPlugins().hasPlugin('com.android.library')) {
    task install(type: Upload, dependsOn: assemble) {
      repositories.mavenInstaller {
        configuration = configurations.archives

        configurePom(pom)
      }
    }

    task androidJavadocsJar(type: Jar) {
      archiveClassifier = 'javadoc'
      from "$buildDir/dokkaJavadoc"
    }

    task androidSourcesJar(type: Jar) {
      archiveClassifier = 'sources'
      from android.sourceSets.main.java.source
    }
  } else {
    install {
      repositories.mavenInstaller {
        configurePom(pom)
      }
    }

    java {
      withJavadocJar()
      withSourcesJar()
    }
  }

  if (project.getPlugins().hasPlugin('org.jetbrains.intellij') &&
      !getPluginToken().isEmpty()) {
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')) {
      archives androidSourcesJar
      archives androidJavadocsJar
    } else {
      archives sourcesJar
      archives javadocJar
    }
  }

  publishing {
    repositories {
      maven {
        name 'local'
        url "file://${rootProject.buildDir}/localMaven"
      }
      maven {
        url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
        credentials {
          username = getRepositoryUsername()
          password = getRepositoryPassword()
        }
      }
    }
    publications {
      libraryMaven(MavenPublication) {
        groupId = GROUP
        artifactId = POM_ARTIFACT_ID
        version = VERSION_NAME
        configurePublicationPom(pom)
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
          from components.release
          artifact(androidSourcesJar)
          artifact(androidJavadocsJar)
        } else {
          from components.java
        }
      }
    }
  }
}
