import org.jetbrains.kotlin.konan.target.HostManager
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeOutputKind

plugins {
  alias(libs.plugins.kotlin.multiplatform)
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
  id("app.cash.sqldelight.toolchain.runtime")
}

archivesBaseName = 'sqldelight-androidx-paging3'

kotlin {
  ios()
  iosSimulatorArm64()
  jvm()
  js {
    browser()
  }
  linuxX64()
  mingwX64()

  sourceSets {
    commonMain {
      dependencies {
        api projects.runtime
        api libs.app.cash.paging.common
        implementation libs.kotlin.coroutines.core
      }
    }
    commonTest {
      dependencies {
        implementation libs.kotlin.test
        implementation libs.kotlin.coroutines.test
        implementation libs.stately.concurrency
      }
    }
    nativeMain {
    }
    nativeTest {
      dependsOn(nativeMain)
      dependsOn(commonTest)
      dependencies {
        implementation projects.drivers.nativeDriver
      }
    }
    iosMain {
      dependsOn(nativeMain)
    }
    iosTest {
      dependsOn(nativeTest)
      dependencies {
        implementation libs.app.cash.paging.runtime.uikit
      }
    }
    iosSimulatorArm64Main {
      dependsOn(iosMain)
    }
    iosSimulatorArm64Test {
      dependsOn(iosTest)
    }
    linuxX64Main {
      dependsOn(nativeMain)
    }
    linuxX64Test {
      dependsOn(nativeTest)
    }
    mingwX64Main {
      dependsOn(nativeMain)
    }
    mingwX64Test {
      dependsOn(nativeTest)
    }
    jvmTest {
      dependencies {
        implementation projects.drivers.sqliteDriver
        implementation libs.androidx.paging3.runtime
      }
    }
    jsTest {
      dependencies {
        implementation projects.drivers.sqljsDriver
      }
    }
  }

  configure([targets.iosX64, targets.iosArm64, targets.iosSimulatorArm64]) {
    binaries.configureEach {
      // we only need to link sqlite for the test binaries
      if (outputKind == NativeOutputKind.TEST) {
        linkerOpts += ["-lsqlite3"]
      }
    }
  }

  configure([targets.linuxX64]) {
    binaries.configureEach {
      // we only need to link sqlite for the test binaries
      if (outputKind == NativeOutputKind.TEST) {
        linkerOpts += ["-L$rootDir/libs/linux".toString(), "-lsqlite3"]
      }
    }
  }

  configure([targets.mingwX64]) {
    binaries.configureEach {
      // we only need to link sqlite for the test binaries
      if (outputKind == NativeOutputKind.TEST) {
        linkerOpts += ["-Lc:\\msys64\\mingw64\\lib", "-L$rootDir\\libs\\windows".toString(), "-lsqlite3"]
      }
    }
  }
}

//linking fails for the linux test build if not built on a linux host
//ensure the tests and linking for them is only done on linux hosts
tasks.named("linuxX64Test") { enabled = HostManager.hostIsLinux }
tasks.named("linkDebugTestLinuxX64") { enabled = HostManager.hostIsLinux }

tasks.named("mingwX64Test") { enabled = HostManager.hostIsMingw }
tasks.named("linkDebugTestMingwX64") { enabled = HostManager.hostIsMingw }

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
