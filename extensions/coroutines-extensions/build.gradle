import org.jetbrains.kotlin.gradle.plugin.mpp.NativeOutputKind

plugins {
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
  id("app.cash.sqldelight.multiplatform")
  id("app.cash.sqldelight.toolchain.runtime")
}

archivesBaseName = 'sqldelight-coroutines-extensions'

kotlin {
  targetHierarchy.default {
    it.group("testableNative") {
      // no withApple: https://github.com/cashapp/sqldelight/issues/4257
      it.withIos()
      it.withTvos()
      it.withMacos()
      it.withWatchosArm32()
      it.withWatchosArm64()
      it.withWatchosX64()
      it.withWatchosSimulatorArm64()

      it.withLinuxX64()
      it.withMingw()
    }
  }

  sourceSets {
    commonMain {
      dependencies {
        api projects.runtime
        api libs.kotlin.coroutines.core
        implementation project(":extensions:async-extensions")
      }
    }
    commonTest {
      dependencies {
        implementation libs.kotlin.coroutines.test
        implementation libs.kotlin.test
        implementation libs.turbine
      }
    }
    jvmTest {
      dependencies {
        implementation libs.kotlin.test.junit
        implementation projects.drivers.sqliteDriver
        implementation libs.stately.concurrency
      }
      languageSettings {
        optIn('kotlinx.coroutines.ExperimentalCoroutinesApi')
      }
    }
    jsTest {
      dependencies {
        def sqljsPackage = file("sqljs/build/packages/js")
        sqljsPackage.mkdirs()

        implementation projects.drivers.webWorkerDriver
        implementation npm("sql.js", libs.versions.sqljs.get())
        implementation npm("@cashapp/sqldelight-sqljs-worker", sqljsPackage)
      }
    }
    testableNativeTest {
      dependencies {
        implementation projects.drivers.nativeDriver
        implementation libs.stately.concurrency
      }
    }
  }

  configure([targets.iosX64, targets.iosArm64, targets.tvosX64, targets.tvosArm64, targets.watchosX64, targets.watchosArm32, targets.watchosArm64, targets.macosX64, targets.macosArm64, targets.iosSimulatorArm64, targets.watchosSimulatorArm64, targets.tvosSimulatorArm64]) {
    binaries.configureEach {
      // we only need to link sqlite for the test binaries
      if (outputKind == NativeOutputKind.TEST) {
        linkerOpts += ["-lsqlite3"]
      }
    }
  }

  configure([targets.linuxX64]) {
    compilations.configureEach {
      if (name == "test") {
        cinterops {
          sqlite {
            // use sqlite3 amalgamation on linux tests to prevent linking issues on new linux distros with dependency libraries which are to recent (for example glibc)
            // see: https://github.com/touchlab/SQLiter/pull/38#issuecomment-867171789
            defFile = new File("$rootDir/libs/linux/cinterop/sqlite3.def")
          }
        }
      }
    }
  }

  configure([targets.mingwX64]) {
    binaries.configureEach {
      // we only need to link sqlite for the test binaries
      if (outputKind == NativeOutputKind.TEST) {
        linkerOpts += ["-Lc:\\msys64\\mingw64\\lib", "-L$rootDir\\libs\\windows".toString(), "-lsqlite3"]
      }
    }
  }
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
