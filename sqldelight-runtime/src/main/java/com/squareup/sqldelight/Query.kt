package com.squareup.sqldelight

import android.arch.persistence.db.SupportSQLiteOpenHelper
import android.arch.persistence.db.SupportSQLiteQuery
import android.database.Cursor

/**
 * A listenable, tyoed query generated by SQLDelight.
 *
 * @param RowType the type that this query can map it's result set to.
 */
abstract class Query<out RowType>(
    private val openHelper: SupportSQLiteOpenHelper,
    private val queryQueue: MutableList<Query<*>>,
    private val mapper: (Cursor) -> RowType
): SupportSQLiteQuery {
  private val listeners = mutableSetOf<Listener>()

  /**
   * Notify listeners that their current result set is staled.
   *
   * Called internally by SQLDelight when it detects a possible staling of the result set. Emits
   * some false positives but never misses a true positive.
   */
  fun notifyResultSetChanged() {
    synchronized(queryQueue) {
      listeners.forEach(Listener::queryResultsChanged)
    }
  }

  /**
   * Register a listener to be notified of future changes in the result set.
   */
  fun addListener(listener: Listener) {
    synchronized(queryQueue) {
      if (listeners.isEmpty()) queryQueue.add(this)
      listeners.add(listener)
    }
  }

  fun removeListener(listener: Listener) {
    synchronized(queryQueue) {
      listeners.remove(listener)
      if (listeners.isEmpty()) queryQueue.remove(this)
    }
  }

  /**
   * Runs this query on the [database][openHelper].
   */
  fun execute() = openHelper.readableDatabase.query(this)

  /**
   * Run this query on the [database][openHelper] and return the result set as a list of [RowType]
   */
  fun executeAsList(): List<RowType> {
    val result = mutableListOf<RowType>()
    execute().use {
      while (it.moveToNext()) result.add(mapper(it))
    }
    return result
  }

  /**
   * Run this query on the [database][openHelper] and return the only row of the result set as a
   * non null [RowType]
   *
   * @throws NullPointerException if when executed this query has no rows in its result set.
   * @throws IllegalStateException if when executed this query has multiple rows in its result set.
   */
  fun executeAsOne(): RowType {
    return executeAsOneOrNull()!!
  }

  /**
   * Run this query on the [database][openHelper] and return the first row of hte result set as a
   * non null [RowType] or null if the result set has no rows.
   *
   * @throws IllegalStateException if when executed this query has multiple rows in its result set.
   */
  fun executeAsOneOrNull(): RowType? {
    execute().use {
      if (!it.moveToFirst()) return null
      val item = mapper(it)
      if (it.moveToNext()) {
        throw IllegalStateException("Cursor returned more than 1 row")
      }
      return item
    }
  }

  interface Listener {
    fun queryResultsChanged()
  }
}
